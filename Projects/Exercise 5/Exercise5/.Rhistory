layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat", "clarity")],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c(clarity")],
y = diam$price,
plot = "scatter",
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("clarity")],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat")],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("clarity")],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbt(diam)
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(diam)
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 100))
# featurePlot(x = diam[, c("clarity")],
#             y = diam$price,
#             plot = "scatter",
#             layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 100))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
layout = c(2, 3))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
layout = c(3, 2))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
layout = c(3, 2))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("cut")],
y = diam$price,
plot = "scatter",
layout = c(1, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("cut", "color")],
y = diam$price,
plot = "scatter",
layout = c(2, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = c("p", "scatter"),
layout = c(3, 2))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter"
type = c("p", "scatter"),
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
type = c("p", "scatter"),
layout = c(3, 2))
ggplot(diam, aes(x=color, y=price)) +
geom_line()
ggplot(diam, aes(x=color, y=price)) +
geom_point()
ggplot(diam, aes(x=color, y=price)) +
geom_bar()
ggplot(diam, aes(x=color, y=price)) +
geom_bar(stat="prop")
ggplot(diam, aes(x=color, y=price)) +
geom_col()
p1 <- ggplot(diam, aes(x=color, y=price)) +
geom_col() +
p2 <- ggplot(diam, aes(x=cut, y=price)) +
geom_col() +
together <- ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, label.x=1)
# install.packages("caret", repos="http://cran.us.r-project.org")
# install.packages("modeldata", repos="http://cran.us.r-project.org")
# install.packages("randomForest", repos="http://cran.us.r-project.org")
# install.packages("knn", repos="http://cran.us.r-project.org")
# install.packages("e1071", repos="http://cran.us.r-project.org")
# install.packages("kableExtra", repos="http://cran.us.r-project.org")
# install.packages("Metrics", repos="http://cran.us.r-project.org")
# install.packages("AppliedPredictiveModeling", repos="http://cran.us.r-project.org")
install.packages("ggpubr", repos="http://cran.us.r-project.org")
library(caret)
library(modeldata)
library(kableExtra)
library(dplyr)
library(cowplot)
library(Metrics)
library(AppliedPredictiveModeling)
library(ggpubr)
p1 <- ggplot(diam, aes(x=color, y=price)) +
geom_col() +
p2 <- ggplot(diam, aes(x=cut, y=price)) +
geom_col() +
together <- ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, label.x=1)
p1 <- ggplot(diam, aes(x=color, y=price)) +
geom_col()
p2 <- ggplot(diam, aes(x=cut, y=price)) +
geom_col()
together <- ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, label.x=1)
print(together)
color <- ggplot(diam, aes(x=color, y=price)) +
geom_col()
cut <- ggplot(diam, aes(x=cut, y=price)) +
geom_col()
clarity <- ggplot(diam, aes(x=clarity, y=price)) +
geom_col()
together <- ggarrange(p1, cut, clarity, ncol = 1, nrow = 3, common.legend = TRUE, label.x=1)
print(together)
data("diamonds")
diam <- diamonds
print(paste("Liczba kolumn: ", ncol(diam)))
print(paste("Liczba wierszy: ", nrow(diam)))
print("Kolumny:")
print(colnames(diam))
featuresNames <- setdiff(colnames(diam), c("price"))
rowsWithNA <- which(is.na(diam))
print("Liczba wierszy z brakującymi wartościami: ")
print(rowsWithNA)
kbl(head(diam))  %>%
kable_material(c("hover"), full_width=F)
knitr::opts_chunk$set(echo = TRUE)
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
install.packages("caret", repos="http://cran.us.r-project.org")
install.packages("modeldata", repos="http://cran.us.r-project.org")
install.packages("randomForest", repos="http://cran.us.r-project.org")
install.packages("knn", repos="http://cran.us.r-project.org")
install.packages("e1071", repos="http://cran.us.r-project.org")
install.packages("kableExtra", repos="http://cran.us.r-project.org")
install.packages("Metrics", repos="http://cran.us.r-project.org")
install.packages("AppliedPredictiveModeling", repos="http://cran.us.r-project.org")
install.packages("ggpubr", repos="http://cran.us.r-project.org")
library(caret)
library(modeldata)
library(kableExtra)
library(dplyr)
library(cowplot)
library(Metrics)
library(AppliedPredictiveModeling)
library(ggpubr)
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
lrGrid <- expand.grid(intercept = c(TRUE, FALSE))
lr_m <- train(price ~ .,
data=training,
method="lm",
preProcess = c("center", "scale"),
trControl = ctrl,
tuneGrid = lrGrid,
metric = "RMSE")
data("diamonds")
diam <- diamonds
print(paste("Liczba kolumn: ", ncol(diam)))
print(paste("Liczba wierszy: ", nrow(diam)))
print("Kolumny:")
print(colnames(diam))
featuresNames <- setdiff(colnames(diam), c("price"))
rowsWithNA <- which(is.na(diam))
print("Liczba wierszy z brakującymi wartościami: ")
print(rowsWithNA)
kbl(head(diam))  %>%
kable_material(c("hover"), full_width=F)
set.seed(42)
inTraining <- createDataPartition(y=diam$price,
p=0.7,
list=F)
training <- diam[inTraining,]
print(paste("Liczba wierszy zbioru treningowego: ", nrow(training)))
testing <- diam[-inTraining,]
print(paste("Liczba wierszy zbioru tetowego: ", nrow(testing)))
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
lrGrid <- expand.grid(intercept = c(TRUE, FALSE))
lr_m <- train(price ~ .,
data=training,
method="lm",
preProcess = c("center", "scale"),
trControl = ctrl,
tuneGrid = lrGrid,
metric = "RMSE")
print(lr_m)
y_pred <- predict(lr_m, newdata=testing)
y_test <- testing[["price"]]
print(paste("Średnia cena to $", mean(diam$price), " odchylenie standardowe to $", sd(diam$price), sep=""))
print(paste("Błąd RMSE to $", rmse(y_test, y_pred), sep=""))
color <- ggplot(diam, aes(x=color, y=price)) +
geom_col()
cut <- ggplot(diam, aes(x=cut, y=price)) +
geom_col()
clarity <- ggplot(diam, aes(x=clarity, y=price)) +
geom_col()
together <- ggarrange(p1, cut, clarity, ncol = 1, nrow = 3, common.legend = TRUE, label.x=1)
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
lrGrid <- expand.grid(intercept = c(TRUE, FALSE))
lr_m <- train(price ~ .,
data=training,
method="lm",
preProcess = c("center", "scale"),
trControl = ctrl,
tuneGrid = lrGrid,
metric = "RMSE")
print(lr_m)
y_pred <- predict(lr_m, newdata=testing)
y_test <- testing[["price"]]
print(paste("Średnia cena to $", round(mean(diam$price), digits=2), " odchylenie standardowe to $", round(sd(diam$price), digits=2), sep=""))
print(paste("Błąd RMSE to ", round(rmse(y_test, y_pred), digits=2), sep=""))
shiny::runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
url.exists("https://img.pokemondb.net/sprites/ruby-sapphire/normal/charizard.png")
install.packages("Rcurl")
install.packages("RCurl")
library(RCurl)
url.exists("https://img.pokemondb.net/sprites/ruby-sapphire/normal/charizard.png")
runApp('Exercise 5/Exercise5')
url.exists("https://img.pokemondb.net/sprites/ruby-sapphire/normal/chatot.png")
url.exists("https://img.pokemondb.net/sprites/ruby-sapphire/normal/charizard.png")
url.exists("https://img.pokemondb.net/sprites/ruby-sapphire/normal/chatot.png")
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
shiny::runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
runApp('Exercise 5/Exercise5')
pokemonData()
temp <- read.table("pokemons.csv", head=TRUE, sep=',')
getwd()
setwd("Exercise_5")
setwd("Exercise5")
setwd("Exercise 5")
temp <- read.table("pokemons.csv", head=TRUE, sep=',')
setwd("Exercise5")
temp <- read.table("pokemons.csv", head=TRUE, sep=',')
temp$name=="Charizard"
select(temp, name=="Charizard")
select(temp, temp$name=="Charizard")
library(dplyr)
select(temp, name=="Charizard")
colnames(temp)
select(temp, name="Charizard")
filter(temp, name=="Charizard")
jednostka <- filter(temp, name=="Charizard")
knitr::kable(jednostka)
jednostka
temp2 <- reshape2::melt(temp, id.vars = "name", variable.name = "category",
measure.vars = input$checkboxes,
value.name="scores")
temp2 <- reshape2::melt(temp, id.vars = "name", variable.name = "category",value.name="scores")
temp2
jednostka <- filter(temp2, name=="Charizard")
jednostka
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
temp2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
DT::datatable()
?DT::datatable
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
temp
filter(temp, name=="Butterfree")
t <-filter(temp, name=="Butterfree")
select(t, evolution)
t <- select(t, evolution)
t
class(t)
t[1,1]
class(t[1,1])
temp == ""
temp == "" <- temp == "brak danych"
temp == ""
temp[temp == ""]
temp[temp == ""] <- "brak danych"
temp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
temp <- read.table("pokemons.csv", head=TRUE, sep=',')
filter(pokemonData(), name %in% c("Charmander", "Bulbasaur"))
filter(temp, name %in% c("Charmander", "Bulbasaur"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
