library(devtools)
swirl()
library(swril)
library(swirl)
swirl()
getwd()
ls()
play()
getwd()
nxt()
exit()
help()
swirl()
x <- 9
ls()
list.files()
dir()
?list.files
args(list.files())
args(list.files
)
old.dir<-getwd()
dir.create('testdir')
setwd("testdir")
file.create((mytest.R))
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename()
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,20, by=0.5)
seq(0,10, by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5, 55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<=c("My", "name", "is")
my_char<-c("My", "name", "is")
my_char
paste((my_char, collapse=" "))
paste(my_char, collapse = " ")
my_name<-c(my_char, "Marcin")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y,z), 100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
inf/inf
inf-inf
Inf-Inf
x
x[1:10]
x{is.na(x)}
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
?C
?c
c(x)[3,5,7]
c(x)[3:7:2]
x[c(3,5,7)]
x[0]
x
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-(foo=11,bar=2,norf=NA)
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
identical(names(vect), names(vect2))
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix<-matrix(1:20,4,5)
my_matrix<-matrix(1:20,nrow=4,ncol=5)
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5)
my_matrix2<-matrix(data=1:20, nrow=4, ncol=5)
my_matrix2<-matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2<-matrix(1:20,4,5)
info()
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
matrix(1:9, nrow = 3, ncol = 3)
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2<-matrix(1:20, nrow = 4, ncol = 5)
play()
my_test<-matrix(1:20, nrow = 4, ncol = 5)
my_test
my_test2 <- matrix(1:20, nrow = 4, ncol = 5)
my_test2
my_test3 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_test3
nxt()
identical(my_matrix, my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
calss(my_data)
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==False
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!5=7
5!==7
5 !== 7
5 == 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 >4)
identical()
identical("twins","twins")
xor(5==6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
play()
sample(4)
nxt()
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first funcion!")
boring_function('My first funcion!')
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
sumbit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor=11, num=5)
remainder(4=11, div=2)
remainder(4=11, divaisor=2)
remainder(4=11, divisor=2)
remainder(4, div=2)
args(remainder)
submit()
evaluate(std, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(vector){vector[1]}, c(8,4,0))
evaluate(function(vector){vector[3]}, c(8,4,0))
evaluate(function(vector){vector[length(vector)]}, c(8,4,0))
?paste
paste("programming", "is", "fun")
paste("programming", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Siemka, spoko ten R jakby co.")
submit()
submit()
submit()
mad_libs("szkola", "colorful", "pies")
mad_libs(c("szkola", "colorful", "pies"))
mad_libs("szkola", "colorful", "pies")
mad_libs(place="szkola", adjective="colorful", noun="pies")
submit()
"Good" %p% "job!"
"I" %p% "love" %p% "R!"
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[, 11:17]
head(flag_colors)
lapply(flags_color, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
play()
dim(flags)
summary(flags)
temp<-summary(flags)
class(temp)
dim(temp)
temp[1]
temp[2]
temp[5]
temp[3]
temp[4]
temp["triangle"]
temp$triangle
temp[, 4]
temp[, 1:3]
temp[, 1]
temp[1, ]
viewinfo(flags)
str(flags)
?str
flags["language"]
flags["name"]
nxt()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
play()
?table
nxt()
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
play()
dim(flags)
tapply(flags$population, (flags$red && flags$white), mean)
tapply(flags$population, flags$red, flags$white, mean)
tapply(flags$population, [flags$red, flags$white], mean)
tapply(flags$population, list(flags$red, flags$white), mean)
tapply(flags$population, list(flags$red, flags$white, flags$landmass), mean)
tapply(flags$population, list(flags$landmass), mean)
tapply(flags$population, list(flags$landmass, flags$name), mean)
tapply(flags$population, list( flags$name), mean)
tapply(flags$population, list(flags$name, flags$red, flags$white), mean)
tapply(flags$population, list(flags$name, flags$red), mean)
tapply(flags$population, list(flags$red), mean)
nxt()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncols(plants)
ncol(plants)
object.size(plants)
play()
class(dim(plants))
dim(plants)[1]
nxt()
names(plants)
?head
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1), 100, replcae=TRUE, prob=c(0.3, 0.7))
flips<-sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2<-rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 100))
my_pois <- replicate(100, rpois(5, 100))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
play()
class(my_pois)
nxt()
class(t1)
unclass(t1)
t2<-as.POSIXlt(Syst.time())
t2<-as.POSIXlt(Sys.time())
t2
t1
class(t2)
play()
class(t1)
as.POSIXXt(t1)
as.POSIXt(t1)
nxt()
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays((d1))
weekdays(d1)
weekdays(t1)
months(t1)
quarters(t2)
t3<-"October 17, 1986, 08:24"
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d,%Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
play()
t4
unclass(t4)
t3
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
?strptime
t3<-"PaÅºdziernik 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
nxt()
Sys.time() > t1
Sys.time(-t1)
Sys.time()-t1
difftime(Sys.time(), t1, units='days')
data(cars)
viewinfo()
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
?plot
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab='Stopping Distance')
plot(x=cars$speed, y=cars$dist, ylab='Stopping Distance')
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab='Stopping Distance')
?plot
plot(cars, main='My Plot')
plot(cars, sub='My Plot Subtitle', )
plot(cars, sub='My Plot Subtitle' )
plot(cats, col=2)
?par
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula= mpg ~ cyl, data=mtcars)
hist(mtcars$mpg)
getwd()
setwd("Uczelnia")
getwd()
setwd("EMD/Projekty/Zadanie Wyklad 3")
getwd()
tabelka <- read.csv("PortretPoznania2002-2014.csv")
tabelka
tabelka <- read.csv("PortretPoznania2002-2014.csv", skip = 11, nrows15, sep=',')
tabelka <- read.csv("PortretPoznania2002-2014.csv", skip = 11, nrows=15, sep=',')
tabelka
tabelka <- read.table("PortretPoznania2002-2014.csv", skip = 11, nrows=15, sep=',')
tabelka
