theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'carat', 'cut', 'clarity', 'depth')],
y = diam$price,
plot = "scatter",
layout = c(3, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'carat', 'color', 'clarity', 'depth')],
y = diam$price,
plot = "scatter",
layout = c(3, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'carat','depth')],
y = diam$price,
plot = "scatter",
layout = c(3, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'carat', 'cut', 'color', 'clarity', 'depth', 'table')],
y = diam$price,
plot = "scatter",
layout = c(3, 3))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'carat', 'cut', 'color', 'clarity', 'depth', 'table')],
y = diam$price,
plot = "scatter",
layout = c(9, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'carat', 'cut', )],
y = diam$price,
plot = "scatter",
layout = c(9, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'carat', 'cut', )],
y = diam$price,
plot = "scatter",
layout = c(5, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'carat', 'cut')],
y = diam$price,
plot = "scatter",
layout = c(5, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z' 'cut')],
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'cut')],
y = diam$price,
plot = "scatter",
layout = c(5, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'cut')],
y = diam$price,
plot = "scatter",
layout = c(4, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c('x','y','z', 'carat')],
y = diam$price,
plot = "scatter",
layout = c(4, 1))
feturesNames
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat", "color","clarity", "depth", "table" , "x", "y", "z" )],
y = diam$price,
plot = "scatter",
layout = c(4, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat", "color","clarity", "depth" , "x", "y", "z" )],
y = diam$price,
plot = "scatter",
layout = c(4, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat", "color" )],
y = diam$price,
plot = "scatter",
layout = c(4, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("color","clarity", "depth", "table" , "x", "y", "z" )],
y = diam$price,
plot = "scatter",
layout = c(4, 1))
, "color
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat"","clarity", "depth", "table" , "x", "y", "z" )],
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat","clarity", "depth", "table" , "x", "y", "z" )],
y = diam$price,
plot = "scatter",
layout = c(4, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat" ,"clarity", "depth", "table" , "x", "y", "z" )],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
data("diamonds")
diam <- diamonds
print(paste("Liczba kolumn: ", ncol(diam)))
print(paste("Liczba wierszy: ", nrow(diam)))
print("Kolumny:")
print(colnames(diam))
featuresNames <- setdiff(colnames(diam), c("price"))
rowsWithNA <- which(is.na(churnData))
print("Liczba wierszy z brakującymi wartościami: ")
print(rowsWithNA)
kbl(head(diam))
data("diamonds")
diam <- diamonds
print(paste("Liczba kolumn: ", ncol(diam)))
print(paste("Liczba wierszy: ", nrow(diam)))
print("Kolumny:")
print(colnames(diam))
featuresNames <- setdiff(colnames(diam), c("price"))
rowsWithNA <- which(is.na(diam))
print("Liczba wierszy z brakującymi wartościami: ")
print(rowsWithNA)
kbl(head(diam))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat" )],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat", "clarity")],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c(clarity")],
y = diam$price,
plot = "scatter",
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("clarity")],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("carat")],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
featurePlot(x = diam[, c("clarity")],
y = diam$price,
plot = "scatter",
layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbt(diam)
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(diam)
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 100))
# featurePlot(x = diam[, c("clarity")],
#             y = diam$price,
#             plot = "scatter",
#             layout = c(7, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 100))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
layout = c(2, 3))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
layout = c(3, 2))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
layout = c(3, 2))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("cut")],
y = diam$price,
plot = "scatter",
layout = c(1, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("cut", "color")],
y = diam$price,
plot = "scatter",
layout = c(2, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = c("p", "scatter"),
layout = c(3, 2))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter"
type = c("p", "scatter"),
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
type = c("p", "scatter"),
layout = c(3, 2))
ggplot(diam, aes(x=color, y=price)) +
geom_line()
ggplot(diam, aes(x=color, y=price)) +
geom_point()
ggplot(diam, aes(x=color, y=price)) +
geom_bar()
ggplot(diam, aes(x=color, y=price)) +
geom_bar(stat="prop")
ggplot(diam, aes(x=color, y=price)) +
geom_col()
p1 <- ggplot(diam, aes(x=color, y=price)) +
geom_col() +
p2 <- ggplot(diam, aes(x=cut, y=price)) +
geom_col() +
together <- ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, label.x=1)
# install.packages("caret", repos="http://cran.us.r-project.org")
# install.packages("modeldata", repos="http://cran.us.r-project.org")
# install.packages("randomForest", repos="http://cran.us.r-project.org")
# install.packages("knn", repos="http://cran.us.r-project.org")
# install.packages("e1071", repos="http://cran.us.r-project.org")
# install.packages("kableExtra", repos="http://cran.us.r-project.org")
# install.packages("Metrics", repos="http://cran.us.r-project.org")
# install.packages("AppliedPredictiveModeling", repos="http://cran.us.r-project.org")
install.packages("ggpubr", repos="http://cran.us.r-project.org")
library(caret)
library(modeldata)
library(kableExtra)
library(dplyr)
library(cowplot)
library(Metrics)
library(AppliedPredictiveModeling)
library(ggpubr)
p1 <- ggplot(diam, aes(x=color, y=price)) +
geom_col() +
p2 <- ggplot(diam, aes(x=cut, y=price)) +
geom_col() +
together <- ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, label.x=1)
p1 <- ggplot(diam, aes(x=color, y=price)) +
geom_col()
p2 <- ggplot(diam, aes(x=cut, y=price)) +
geom_col()
together <- ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, label.x=1)
print(together)
color <- ggplot(diam, aes(x=color, y=price)) +
geom_col()
cut <- ggplot(diam, aes(x=cut, y=price)) +
geom_col()
clarity <- ggplot(diam, aes(x=clarity, y=price)) +
geom_col()
together <- ggarrange(p1, cut, clarity, ncol = 1, nrow = 3, common.legend = TRUE, label.x=1)
print(together)
data("diamonds")
diam <- diamonds
print(paste("Liczba kolumn: ", ncol(diam)))
print(paste("Liczba wierszy: ", nrow(diam)))
print("Kolumny:")
print(colnames(diam))
featuresNames <- setdiff(colnames(diam), c("price"))
rowsWithNA <- which(is.na(diam))
print("Liczba wierszy z brakującymi wartościami: ")
print(rowsWithNA)
kbl(head(diam))  %>%
kable_material(c("hover"), full_width=F)
data(diamonds)
library(caret)
data(diamonds)
?diamonds
mean(diamonds$price)
sd(diamonds$price)
knitr::opts_chunk$set(echo = TRUE)
install.packages("caret", repos="http://cran.us.r-project.org")
install.packages("modeldata", repos="http://cran.us.r-project.org")
install.packages("caret", repos = "http://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(modeldata)
library(kableExtra)
library(dplyr)
library(cowplot)
library(Metrics)
library(AppliedPredictiveModeling)
library(ggpubr)
data("diamonds")
diam <- diamonds
print(paste("Liczba kolumn: ", ncol(diam)))
print(paste("Liczba wierszy: ", nrow(diam)))
print("Kolumny:")
print(colnames(diam))
featuresNames <- setdiff(colnames(diam), c("price"))
rowsWithNA <- which(is.na(diam))
print("Liczba wierszy z brakującymi wartościami: ")
print(rowsWithNA)
kbl(head(diam))  %>%
kable_material(c("hover"), full_width=F)
set.seed(42)
inTraining <- createDataPartition(y=diam$price,
p=0.7,
list=F)
training <- diam[inTraining,]
print(paste("Liczba wierszy zbioru treningowego: ", nrow(training)))
testing <- diam[-inTraining,]
print(paste("Liczba wierszy zbioru tetowego: ", nrow(testing)))
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
lrGrid <- expand.grid(intercept = c(TRUE, FALSE))
lr_m <- train(price ~ .,
data=training,
method="lm",
preProcess = c("center", "scale"),
trControl = ctrl,
tuneGrid = lrGrid,
metric = "RMSE")
print(lr_m)
y_pred <- predict(lr_m, newdata=testing)
y_test <- testing[["price"]]
print(paste("Średnia cena to $", mean(diam$price), " z odchyleniem $", sd(diam$price)))
print(paste("Błąd RMSE wynosi: ", rmse(y_test, y_pred)))
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
lrGrid <- expand.grid(intercept = c(TRUE, FALSE))
lr_m <- train(price ~ .,
data=training,
method="lm",
preProcess = c("center", "scale"),
trControl = ctrl,
tuneGrid = lrGrid,
metric = "RMSE")
print(lr_m)
y_pred <- predict(lr_m, newdata=testing)
y_test <- testing[["price"]]
print(paste("Średnia cena to $", mean(diam$price), " z odchyleniem $", sd(diam$price), sep = ""))
print(paste("Błąd RMSE wynosi:", rmse(y_test, y_pred)))
