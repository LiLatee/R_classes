layout = c(2, 3))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
layout = c(3, 2))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
layout = c(3, 2))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("cut")],
y = diam$price,
plot = "scatter",
layout = c(1, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("cut", "color")],
y = diam$price,
plot = "scatter",
layout = c(2, 1))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = c("p", "scatter"),
layout = c(3, 2))
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter"
type = c("p", "scatter"),
theme1 <- trellis.par.get()
theme1$plot.symbol$col = rgb(.2, .2, .2, .4)
theme1$plot.symbol$pch = 16
theme1$plot.line$col = rgb(1, 0, 0, .7)
theme1$plot.line$lwd <- 2
trellis.par.set(theme1)
kbl(head(diam, 10))
featurePlot(x = diam[, c("carat", "depth", "table", "x", "y", "z")],
y = diam$price,
plot = "scatter",
type = c("p", "scatter"),
layout = c(3, 2))
ggplot(diam, aes(x=color, y=price)) +
geom_line()
ggplot(diam, aes(x=color, y=price)) +
geom_point()
ggplot(diam, aes(x=color, y=price)) +
geom_bar()
ggplot(diam, aes(x=color, y=price)) +
geom_bar(stat="prop")
ggplot(diam, aes(x=color, y=price)) +
geom_col()
p1 <- ggplot(diam, aes(x=color, y=price)) +
geom_col() +
p2 <- ggplot(diam, aes(x=cut, y=price)) +
geom_col() +
together <- ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, label.x=1)
# install.packages("caret", repos="http://cran.us.r-project.org")
# install.packages("modeldata", repos="http://cran.us.r-project.org")
# install.packages("randomForest", repos="http://cran.us.r-project.org")
# install.packages("knn", repos="http://cran.us.r-project.org")
# install.packages("e1071", repos="http://cran.us.r-project.org")
# install.packages("kableExtra", repos="http://cran.us.r-project.org")
# install.packages("Metrics", repos="http://cran.us.r-project.org")
# install.packages("AppliedPredictiveModeling", repos="http://cran.us.r-project.org")
install.packages("ggpubr", repos="http://cran.us.r-project.org")
library(caret)
library(modeldata)
library(kableExtra)
library(dplyr)
library(cowplot)
library(Metrics)
library(AppliedPredictiveModeling)
library(ggpubr)
p1 <- ggplot(diam, aes(x=color, y=price)) +
geom_col() +
p2 <- ggplot(diam, aes(x=cut, y=price)) +
geom_col() +
together <- ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, label.x=1)
p1 <- ggplot(diam, aes(x=color, y=price)) +
geom_col()
p2 <- ggplot(diam, aes(x=cut, y=price)) +
geom_col()
together <- ggarrange(p1, p2, ncol = 1, nrow = 2, common.legend = TRUE, label.x=1)
print(together)
color <- ggplot(diam, aes(x=color, y=price)) +
geom_col()
cut <- ggplot(diam, aes(x=cut, y=price)) +
geom_col()
clarity <- ggplot(diam, aes(x=clarity, y=price)) +
geom_col()
together <- ggarrange(p1, cut, clarity, ncol = 1, nrow = 3, common.legend = TRUE, label.x=1)
print(together)
data("diamonds")
diam <- diamonds
print(paste("Liczba kolumn: ", ncol(diam)))
print(paste("Liczba wierszy: ", nrow(diam)))
print("Kolumny:")
print(colnames(diam))
featuresNames <- setdiff(colnames(diam), c("price"))
rowsWithNA <- which(is.na(diam))
print("Liczba wierszy z brakującymi wartościami: ")
print(rowsWithNA)
kbl(head(diam))  %>%
kable_material(c("hover"), full_width=F)
knitr::opts_chunk$set(echo = TRUE)
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
install.packages("caret", repos="http://cran.us.r-project.org")
install.packages("modeldata", repos="http://cran.us.r-project.org")
install.packages("randomForest", repos="http://cran.us.r-project.org")
install.packages("knn", repos="http://cran.us.r-project.org")
install.packages("e1071", repos="http://cran.us.r-project.org")
install.packages("kableExtra", repos="http://cran.us.r-project.org")
install.packages("Metrics", repos="http://cran.us.r-project.org")
install.packages("AppliedPredictiveModeling", repos="http://cran.us.r-project.org")
install.packages("ggpubr", repos="http://cran.us.r-project.org")
library(caret)
library(modeldata)
library(kableExtra)
library(dplyr)
library(cowplot)
library(Metrics)
library(AppliedPredictiveModeling)
library(ggpubr)
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
lrGrid <- expand.grid(intercept = c(TRUE, FALSE))
lr_m <- train(price ~ .,
data=training,
method="lm",
preProcess = c("center", "scale"),
trControl = ctrl,
tuneGrid = lrGrid,
metric = "RMSE")
data("diamonds")
diam <- diamonds
print(paste("Liczba kolumn: ", ncol(diam)))
print(paste("Liczba wierszy: ", nrow(diam)))
print("Kolumny:")
print(colnames(diam))
featuresNames <- setdiff(colnames(diam), c("price"))
rowsWithNA <- which(is.na(diam))
print("Liczba wierszy z brakującymi wartościami: ")
print(rowsWithNA)
kbl(head(diam))  %>%
kable_material(c("hover"), full_width=F)
set.seed(42)
inTraining <- createDataPartition(y=diam$price,
p=0.7,
list=F)
training <- diam[inTraining,]
print(paste("Liczba wierszy zbioru treningowego: ", nrow(training)))
testing <- diam[-inTraining,]
print(paste("Liczba wierszy zbioru tetowego: ", nrow(testing)))
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
lrGrid <- expand.grid(intercept = c(TRUE, FALSE))
lr_m <- train(price ~ .,
data=training,
method="lm",
preProcess = c("center", "scale"),
trControl = ctrl,
tuneGrid = lrGrid,
metric = "RMSE")
print(lr_m)
y_pred <- predict(lr_m, newdata=testing)
y_test <- testing[["price"]]
print(paste("Średnia cena to $", mean(diam$price), " odchylenie standardowe to $", sd(diam$price), sep=""))
print(paste("Błąd RMSE to $", rmse(y_test, y_pred), sep=""))
color <- ggplot(diam, aes(x=color, y=price)) +
geom_col()
cut <- ggplot(diam, aes(x=cut, y=price)) +
geom_col()
clarity <- ggplot(diam, aes(x=clarity, y=price)) +
geom_col()
together <- ggarrange(p1, cut, clarity, ncol = 1, nrow = 3, common.legend = TRUE, label.x=1)
ctrl <- trainControl(method = "repeatedcv",
number=2,
repeats = 5)
lrGrid <- expand.grid(intercept = c(TRUE, FALSE))
lr_m <- train(price ~ .,
data=training,
method="lm",
preProcess = c("center", "scale"),
trControl = ctrl,
tuneGrid = lrGrid,
metric = "RMSE")
print(lr_m)
y_pred <- predict(lr_m, newdata=testing)
y_test <- testing[["price"]]
print(paste("Średnia cena to $", round(mean(diam$price), digits=2), " odchylenie standardowe to $", round(sd(diam$price), digits=2), sep=""))
print(paste("Błąd RMSE to ", round(rmse(y_test, y_pred), digits=2), sep=""))
knitr::opts_chunk$set(echo = TRUE)
install.packages("fpc", repos="http://cran.us.r-project.org")
install.packages("fpc", repos = "http://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
library(fpc)
library(factoextra)
library(ggplot2)
library(NbClust)
library(ggpubr)
library(kableExtra)
library(dbscan)
library(cluster)
printConfMatrix <- function(groundTruthLables, resultLabels)
{
confMatrix <- knitr::kable(table(groundTruthLables, resultLabels), row.names = c(1,2,3,4,5,6), align=rep('c', 5)) %>%
kable_paper(c("hover"), full_width=F) %>%
column_spec(1, bold = T, border_right = T)
confMatrix
}
# printConfMatrix <- function(groundTruthLables, resultLabels)
# {
#   confMatrix <- knitr::kable(table(groundTruthLables, resultLabels), row.names = c(1,2,3,4,5,6), align=rep('c', 5)) %>%
#   kable_paper(c("hover"), full_width=F) %>%
#   column_spec(1, bold = T, border_right = T) %>%
#   row_spec(1, bold = T)
#
#   print(confMatrix)
# }
set.seed(23)
face <- rFace(1000, p=2, dMoNo=3)
df = data.frame(x=face[,1], y=face[,2])
knitr::kable(head(face))
labels = as.integer(attr(face,"grouping"))
groundTruthPlot <- ggplot(df, aes(x, y, color=factor(labels))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
print(groundTruthPlot)
kmeans.res <- eclust(df, "kmeans", k=length(unique(labels)), nstart=25, graph=FALSE, stand=TRUE)
df_temp = data.frame(x=kmeans.res$data$x, y=kmeans.res$data$y, predicted=kmeans.res$cluster)
attributes(kmeans.res)
attributes(kmeans.res$data)
kmeans.res$data$scaled:center
kmeans.res$data$'scaled:center'
kmeans.res$data['scaled:center']
kmeans.res$data[['scaled:center']]
kmeans.res$data
kmeans.res$data["scaled:scale"]
kmeans.res$data[["scaled:scale"]]
attributes(kmeans.res$data)
kmeans.res$data$`scaled:center`
kmeans.res$data
kmeans.res$data$x
?eclust
kmeans.res$data
attributes(kmeans.res$data)
kmeans.res$data
kmeans.res$data$dimnames
kmeans.res$data['dimnames']
class(kmeans.res$data)
kmeans.res$data[1]
kmeans.res$data[2]
kmeans.res$data[2,1]
kmeans.res$data[2,2]
kmeans.res$data[500]
kmeans.res$data[501]
kmeans.res$data[502]
kmeans.res$data[10]
kmeans.res$data[499]
kmeans.res$data[500]
kmeans.res$data[501]
kmeans.res$data[500, 1:2]
kmeans.res$data[1:500, 1]
kmeans.res <- eclust(df, "kmeans", k=length(unique(labels)), nstart=25, graph=FALSE, stand=TRUE)
df_temp = data.frame(x=kmeans.res$data[1:500, 1], y=kmeans.res$data[1:500, 2], predicted=kmeans.res$cluster)
kmeansPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
kmeansSil <- fviz_silhouette(kmeans.res, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(kmeansPlot, kmeansSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("k-means", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, kmeans.res$cluster)
nrow(kmeans$data)
nrow(kmeans.res$data)
kmeans.res <- eclust(df, "kmeans", k=length(unique(labels)), nstart=25, graph=FALSE, stand=TRUE)
df_temp = data.frame(x=kmeans.res$data[, 1], y=kmeans.res$data[, 2], predicted=kmeans.res$cluster)
kmeansPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
kmeansSil <- fviz_silhouette(kmeans.res, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(kmeansPlot, kmeansSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("k-means", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, kmeans.res$cluster)
kmeans.res <- eclust(df, "kmeans", k=length(unique(labels)), nstart=25, graph=FALSE, stand=TRUE)
df_temp = data.frame(x=kmeans.res$data[, 1], y=kmeans.res$data[, 2], predicted=kmeans.res$cluster)
kmeansPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
kmeansSil <- fviz_silhouette(kmeans.res, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(kmeansPlot, kmeansSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("k-means", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, kmeans.res$cluster)
kmedoids.res <- eclust(df, "pam", k=length(unique(labels)), graph=FALSE, stand=TRUE)
df_temp = data.frame(x=kmedoids.res$data[, 1], y=kmedoids.res$data$y, predicted=kmedoids.res$cluster)
kmedoids.res$data
kmedoids.res$data[, 1]
dbscan.res <- fpc::dbscan(df, eps=0.25, MinPts=4, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
?fpc::dbscan
dbscan.res <- fpc::dbscan(df, eps=0.3, MinPts=4, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.4, MinPts=4, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.35, MinPts=4, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.33, MinPts=4, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.32, MinPts=4, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.31, MinPts=4, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.31, MinPts=3, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.31, MinPts=2, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.31, MinPts=3, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.30, MinPts=3, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.28, MinPts=3, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
dbscan.res <- fpc::dbscan(df, eps=0.25, MinPts=3, scale=TRUE)
df_temp = data.frame(x=df$x, y=df$y, predicted=dbscan.res$cluster)
dbscanPlot <- ggplot(df_temp, aes(x, y, color=factor(predicted))) +
geom_point() +
labs(color="Grupa") +
theme_bw()
db_clusters_vector <- dbscan.res[['cluster']]
db_distances <- dist(df)
db_silhouette <- silhouette(db_clusters_vector, db_distances)
dbscanSil <- fviz_silhouette(db_silhouette, palette = "jco", ggtheme = theme_classic(), print.summary = F)
together <- ggarrange(dbscanPlot, dbscanSil, ncol = 2, nrow = 1, common.legend = TRUE, labels = c("DBSCAN", ""), label.x = 0, label.y= 1.05, hjust=0)
print(together)
printConfMatrix(labels, dbscan.res$cluster)
